
=head1 NAME

PRANG::XMLSchema::Guide - converting .xsd to PRANG by hand

=head1 OVERVIEW

With XMLSchema, you are supplied with a set of F<.xsd> files which
define the schema.  This is specified in XML format.  This document
goes through conversion of a real XML Schema document, the example
given here is the RFC 5732 EPP host mapping.

This man page is structured so that it can be used both as a tutorial
and a reference; for use as a reference, scan the headings and look
for the one that corresponds to the XML Schema structure you are
encountering.  For use as a tutorial, read from start to finish, if
you like with the history of XML::EPP open in C<gitk> or a similar
tool.

=head1 GETTING STARTED

=head2 MODULE NAMESPACE

The first thing to do is to choose a namespace which your classes will
sit on.  I like to keep each XML namespace in its own package
heirarchy in Perl.

 <schema targetNamespace="urn:ietf:params:xml:ns:host-1.0"
       xmlns:host="urn:ietf:params:xml:ns:host-1.0"
       xmlns:epp="urn:ietf:params:xml:ns:epp-1.0"
       xmlns:eppcom="urn:ietf:params:xml:ns:eppcom-1.0"
       xmlns="http://www.w3.org/2001/XMLSchema"
       elementFormDefault="qualified">

Five namespaces are defined here; the last one, C<xmlns=...>, says the
namespace that the schema itself is in.  C<xmlns:foo> defines what
namespace nodes in this document with that prefix are in.  However,
unlike regular use of XML namespaces, this affects the interpretation
of I<values>, in particular values of the C<type=> attribute of
various XML Schema declaration elements.

The important one is C<targetNamespace> - I decide to map to the
L<XML::EPP::Host> namespace, and so I create;

 package XML::EPP::Host::Node;
 use Moose::Role;
 sub xmlns { "urn:ietf:params:xml:ns:host-1.0" }
 use XML::EPP::Common;
 1;

Every class I compose this role into will get that XML namespace.
This affects the default namespace for C<has_element> definitions that
refer to a given type.

I also include the L<XML::EPP::Common> class so that all type
definitions are always present.  In fact, this had already been built
to correspond to the namespace URI associated with the C<eppcom>
prefix above.

=head2 CONVERT ROOT NODE(S) TO PRANG::Graph CLASSES

If your XML language can have only one main element type, then make
the "XML::Whatever" a normal class.  If the language can have multiple
elements, use roles.  In the RFC XML Schema appendix, there are found
the following top-level C<element> definitions:

 <!--
 Child elements found in EPP commands.
 -->
  <element name="check" type="host:mNameType"/>
  <element name="create" type="host:createType"/>
  <element name="delete" type="host:sNameType"/>
  <element name="info" type="host:sNameType"/>
  <element name="update" type="host:updateType"/>

Then later:

 <!--
 Child response elements.
 -->
  <element name="chkData" type="host:chkDataType"/>
  <element name="creData" type="host:creDataType"/>
  <element name="infData" type="host:infDataType"/>
  <element name="panData" type="host:panDataType"/>

There are 5 request elements and 4 response elements which can be
used.  In this case, I also want these objects to be types of the
L<XML::EPP::Plugin> role.  This role requires the C<is_command>
function to be defined, so I'll make a couple of convenience roles for
that, too:

So, I write:

 package XML::EPP::Host;
 use Moose::Role;
 with qw(XML::EPP::Plugin PRANG::Graph);
 1;

And:

 package XML::EPP::Host::RQ;
 use Moose::Role;
 with qw(XML::EPP::Host);
 sub is_command { 1 }
 1;

 package XML::EPP::Host::RS;
 use Moose::Role;
 with qw(XML::EPP::Host);
 sub is_command { 0 }
 1;

To define an allowed root node, I can then use:

 package XML::EPP::Host::Check;
 use Moose;
 use PRANG::Graph;
 sub root_element { "check" }
 with
      'XML::EPP::Host::RQ',
      'XML::EPP::Host::Node',
      ;

=head2 CONVERTING C<complexType> TYPES TO ROLES

After we have the top-level definitions for each root element we can
move on to define each sub-type.

Normally C<complexType> definitions will become classes, however
sometimes is is more appropriate to convert them to roles.  In this
instance we are forced to, because they are used for root elements in
this XML Schema, and at the top level of the schema, a single type
must correspond with a single root element.

In this case there is the problematic C<info> and C<delete> elements
which share C<sNameType>.  C<sNameType> seems to indicate a single
list of items, and C<mNameType> a list.  I decide to call these "Item"
and "List", and to make them both roles because they seem to be
generic; see also L</CHOOSING GOOD CLASS NAMES>

 package XML::EPP::Host::Item;
 # <!--
 # Child elements of the <delete> and <info> commands.
 # -->
 #  <complexType name="sNameType">
 #    <sequence>
 #      <element name="name" type="eppcom:labelType"/>
 #    </sequence>
 #  </complexType>
 #
 use Moose::Role;
 use PRANG::Graph;
 has_element 'value' =>
     is => "ro",
     isa => "XML::EPP::Common::labelType",
     ;

 package XML::EPP::Host::List;
 use Moose::Role;
 use PRANG::Graph;
 # <!--
 # Child element of commands that accept multiple names.
 # -->
 # <complexType name="mNameType">
 #   <sequence>
 #     <element name="name" type="eppcom:labelType"
 #      maxOccurs="unbounded"/>
 #   </sequence>
 # </complexType>
 has_element 'members' =>
     is => "ro",
     isa => "ArrayRef[XML::EPP::Common::labelType]",
     ;

Now I can make the C<check>, C<delete> and C<info> messages concrete
types, each with a single C<root_element>.

 package XML::EPP::Host::Check;
 use Moose;
 use PRANG::Graph;
 sub root_element { "check" }
 with
      'XML::EPP::Host::RQ',
      'XML::EPP::Host::Node',
      'XML::EPP::Host::List';

 package XML::EPP::Host::Info;
 use Moose;
 use PRANG::Graph;
 sub root_element { "info" }
 with
      'XML::EPP::Host::RQ',
      'XML::EPP::Host::Node',
      'XML::EPP::Host::Item';

 package XML::EPP::Host::Delete;
 use Moose;
 use PRANG::Graph;
 sub root_element { "delete" }
 with
      'XML::EPP::Host::RQ',
      'XML::EPP::Host::Node',
      'XML::EPP::Host::Item';

That should be enough to parse these messages alone.

So we go back and C<use> the message types from the C<XML::EPP::Host>
package, and we're done:

 package XML::EPP::Host;
 use Moose::Role;
 use XML::EPP::Host::Check;
 use XML::EPP::Host::Delete;
 use XML::EPP::Host::Info;
 with qw(XML::EPP::Plugin PRANG::Graph);
 1;

Let's try it!

 denix:~/src/XML-EPP$ perl -Mlib=lib t/22-xml-rfc5732-host.t -t "0[137]"
 1..9
 ok 1 - 22-xml-rfc5732-host/rfc-examples/01-check-command.xml - parsed OK
 ok 2 - 22-xml-rfc5732-host/rfc-examples/01-check-command.xml - emitted OK (30ms)
 ok 3 - 22-xml-rfc5732-host/rfc-examples/01-check-command.xml - XML output same
 ok 4 - 22-xml-rfc5732-host/rfc-examples/03-info-command.xml - parsed OK
 ok 5 - 22-xml-rfc5732-host/rfc-examples/03-info-command.xml - emitted OK (17ms)
 ok 6 - 22-xml-rfc5732-host/rfc-examples/03-info-command.xml - XML output same
 ok 7 - 22-xml-rfc5732-host/rfc-examples/07-delete-command.xml - parsed OK
 ok 8 - 22-xml-rfc5732-host/rfc-examples/07-delete-command.xml - emitted OK (18ms)
 ok 9 - 22-xml-rfc5732-host/rfc-examples/07-delete-command.xml - XML output same
 denix:~/src/XML-EPP$ 

Win!  This point corresponds to the git commit called;

 rfc5732: implement <check>, <info>, <delete> commands

In C<XMP-EPP.git>

Now I will deal with the C<createType>;

 <!--
 Child elements of the <create> command.
 -->
  <complexType name="createType">
    <sequence>
      <element name="name" type="eppcom:labelType"/>
      <element name="addr" type="host:addrType"
       minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>

C<eppcom:labelType> is already defined.  So, I can refer to it:

 package XML::EPP::Host::Create;
 use Moose;
 use PRANG::Graph;
 sub root_element { "create" }

 with
      'XML::EPP::Host::RQ',
      'XML::EPP::Host::Node',
      ;

 has_element 'name' =>
    is => "ro",
    isa => "XML::EPP::Common::labelType",
    ;

C<addrType> is not yet there to be added to XML::EPP::Host::Create.
So, convert it first; here is the definition:

 <complexType name="addrType">
   <simpleContent>
     <extension base="host:addrStringType">
       <attribute name="ip" type="host:ipType"
        default="v4"/>
     </extension>
   </simpleContent>
 </complexType>

Ah!  C<simpleContent>!  But wait!  It has an attribute, so we can't
use that mapping.  Blast.

=head1 CONVERTING C<simpleType> TYPES

Let's do C<addrStringType> first.

  <simpleType name="addrStringType">
    <restriction base="token">
      <minLength value="3"/>
      <maxLength value="45"/>
    </restriction>
  </simpleType>

Ok, this one is a simpler case - takes the C<token> type defined in
the XML Schema spec, and restricts its... length... to 45?  really?
Oh well, whatever - if that's what it says that's what it says.

The convention I use is to put all simpletypes in the namespace of the
entire module, with the type from the XSD file after it.  So, in
L<XML::EPP::Host> we write:

 use Moose::Util::TypeConstraints;
 use PRANG::XMLSchema::Types;
 subtype "XML::EPP::Host::addrStringType"
    => as "PRANG::XMLSchema::token"
    => where { length $_ >= 3 and length $_ <= 45 };

I also do the C<host:ipType>:

 <simpleType name="ipType">
   <restriction base="token">
     <enumeration value="v4"/>
     <enumeration value="v6"/>
   </restriction>
 </simpleType>

Can become simply:

 enum "XML::EPP::Host::ipType" => qw(v4 v6);

Depending on the exact ordering of loading your classes, you might
find that you need to lift your C<subtype> and C<enum> definitions
into C<BEGIN> blocks.  They must always be defined before an attribute
which uses them is defined, otherwise Moose will create an
C<-E<gt>isa> type constraint, not a C<Str> sub-type type constraint.

Now, with these definitions in place I can get back to the
C<addrType>.

=head2 CONVERTING C<simpleContent> TYPES TO CLASSES

C<simpleContent> means a node with no element children, however it can
have attributes and textual content.  These must be converted to
classes.

 <!--
 Child elements of the <create> command.
 -->
  <complexType name="createType">
    <sequence>
      <element name="name" type="eppcom:labelType"/>
      <element name="addr" type="host:addrType"
       minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>

Becomes the following:

 package XML::EPP::Host::Address;
 use Moose;
 use PRANG::Graph;
 with 'XML::EPP::Host::Node';
 has_element "name" =>
     is => "ro",
     isa => "XML::EPP::Host::addrStringType",
     xml_nodeName => "",
     coerce => 1,
     ;

 has_attr "ip" =>
      is => "ro",
      isa => "XML::EPP::Host::ipType",
      default => "v4",
      ;

Specifying an C<xml_nodeName> on an element, of the empty string
refers to a text node as the contents.  Specifying the C<coerce =E<gt>
1> option will allow values which can be safely transformed to the
correct type transparently be converted.  In this case, it is to pick
up the default rule in L<PRANG::XMLSchema::Types> which trims
whitespace from C<PRANG::XMLSchema::token> nodes.

Right, now I can pop the stack and finish the C<Create> class:

 <element name="addr" type="host:addrType"
          minOccurs="0" maxOccurs="unbounded"/>

Becomes:

 has_element 'addr' =>
      is => "ro",
      isa => "ArrayRef[XML::EPP::Host::Address]",
      xml_min => 0,
      ;

With that, we should hopefully be able to parse the RFC C<create>
command:

 denix:~/src/XML-EPP$ perl -Mlib=lib t/22-xml-rfc5732-host.t -t 05
 1..3
 ok 1 - 22-xml-rfc5732-host/rfc-examples/05-create-command.xml - parsed OK
 ok 2 - 22-xml-rfc5732-host/rfc-examples/05-create-command.xml - emitted OK (36ms)
 ok 3 - 22-xml-rfc5732-host/rfc-examples/05-create-command.xml - XML output same
 denix:~/src/XML-EPP$ 

It worked!

This point is the git commit:

 rfc5732: implement <create> host message

=head2 USING COERCIONS FOR SIMPLER CONSTRUCTION

The L<Moose::Util::TypeConstraints> functions for coercing between
types are invaluable for writing easy to use classes.

For instance, if we write this in our C<Create> class, we can pass
Perl hashes instead of already constructed objects; here is a recipe:

 use Moose::Util::TypeConstraints;
 coerce __PACKAGE__
	 => from "Str",
	 => via { __PACKAGE__->new(value => $_) },
	 ;
 coerce __PACKAGE__
	 => from "HashRef",
	 => via { __PACKAGE__->new($_) },
	 ;

In this, it is assumed that if you pass a plain string, to create an
object with the string in the C<value> field.  Similarly, if a HASH
reference is passed (C<HashRef> to Moose), then create an object,
passing that to the C<-E<gt>new> constructor.

Sadly, this does not imply that C<ArrayRef[XML::EPP::Host::Address]>
with coercion enabled will happily work.  Moose should know this, but
doesn't currently, so we have to declare a specific rule:

 coerce "ArrayRef[XML::EPP::Host::Address]"
     => from "ArrayRef[XML::EPP::Host::Address|HashRef|Str]"
     => via {
         my @rv = @$_;
         for ( @rv ) {
             if ( ref $_ eq "HASH" ) {
                 $_ = XML::EPP::Host::Address->new($_);
             }
             elsif ( !blessed $_ ) {
                 $_ = XML::EPP::Host::Address->new(
                     value => $_,
                        );
             }
         }
         \@rv;
     },
     ;

We are now up to

 rfc5732: useful coercions for Address

=cut

